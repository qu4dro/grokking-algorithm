package ru.orlovvv

/* БИНАРНЫЙ ПОИСК

    Сложность в общем случае log(n)

    Предположим, что вы ищите фамилию человека в телефонной книге.
    Она начинается на букву "К". Конечно, можно начать с самого
    начала и перелистывать страницы, пока фамилия не будет найдена.
    Но для ускорения поиска лучше раскрыть книгу на середине.

    Бинарный поиск - это алгоритм; на входе он получает отсортированный
    список элементов. Для поиска необходимого элемента необходимо с
    каждым шагом исключать половину данных. Например, для поиска загаданного
    числа от 1 до 100, поиск может выглядеть так:

    100 -> 50 -> 25 -> 13 -> 7 -> 4 -> 2 -> 1 (7 шагов)

 */

// Функция получает отсортированный массив и значение.
// Если значение присутствует в массиве, то возвращается его позиция
fun binarySearch(list: Array<Int>, item: Int): Int? {

    var low = 0                            // в переменных low и high хранятся границы
    var high = list.size - 1               // той части поиска, в которой выполняется поиск

    while (low <= high) {                  // пока эта часть не сократится до одного элемента
        val mid = (low + high) / 2         // средний элемент
        val guess = list[mid]              // предполагаемый

        if (guess == item) return mid      // если найдено
        if (guess > item) high = mid - 1   // если много
        else low = mid + 1                 // если мало
    }

    return null                            // значения не существует

}

fun main() {
    val myList = arrayOf(1, 5, 15, 24, 25, 67, 103, 146)
    println(binarySearch(myList, 24))               // => 3
    println(binarySearch(myList, -5))               // => null
}

