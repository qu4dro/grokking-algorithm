package ru.orlovvv

/* ПУЗЫРЬКОВАЯ СОРТИРОВКА

    Сложность в общем случае O(n^2)
    Сложность в лучшем случае O(n)
    Сложность в худшем случае O(n^2)

    Алгоритм сортировки на основе сравнения.
    Итерация происходит слева направо, сравнивая значения в парах и перемещая
    меньшее значение налево. Повторяется до тех пор, пока ни одно значение
    уже не может быть перемещено.

    Пузырьковая сортировка является одновременно стабильной и адаптивной.
    В случае почти отсортированных данных пузырьковая сортировка занимает O(n) времени,
    но требует не менее 2 проходов через данные.
    Это может быть практично, если входные данные обычно находятся в порядке сортировки,
    но иногда могут иметь некоторые неупорядоченные элементы почти в нужном положении.
    Пузырьковой сортировки следует избегать в случае больших коллекций.
    Это не будет эффективно в случае коллекции с обратным порядком.


 */

fun bubbleSort(list: Array<Int>): Array<Int> {
    var swap = true

    while(swap) {                           // пока есть, что менять местами
        swap = false
        for (i in 0 until list.lastIndex) {
            if (list[i] > list[i + 1]) {    // сравнение пары
                val temp = list[i]          // временная переменная для перемещения
                list[i] = list[i + 1]       // левое значение становится правым
                list[i + 1] = temp          // правое значение становится левым
                swap = true
            }
        }
    }
    return list
}

fun main() {
    val list = Array<Int>(100) { it + (0..555).random() }
    println(bubbleSort(list).toList())
}



